add2 <- function(x, y) {
x + y
}
add2(3, 5)
above <- function(x, n) {
use <- x > n
x[use]
}
x <- 1:20
above(x, 12)
above(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
airquality()
dir()
airquality <- read.csv("D:/Cursos/Coursera/DataScience/WORKING_DIRECTORY/hw1_data.csv")
airquality()
airquality <- read.csv("D:/Cursos/Coursera/DataScience/WORKING_DIRECTORY/hw1_data.csv")
airquality
function(airquality)
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality, FALSE)
mydata <- rnorm(100)
sd(mydata)
sd(x = mydata)
sd(x = mydata, na.rm = FALSE)
argm(lm)
arg(lm)
args(lm)
args(plot)
x <- rnorm(100)
y <- rnorm(100)
plot(x, y)
hist(x)
hist(y)
cor(x, y)
q()
x <- 1
print(x)
x
msg <- "hello"
x <-
x
x, msg
s; msg
## Incomplete expression
x <- ## Incomplete expression
x <- 5 ## noting printed
x
print(x)
x
x <- 1:20
x
x <- c(0.5, 0.6)
x
x <- c(TRUE, FALSE)
x
x <- c(1+0i, 2,4i)
x
y <- c(1.7, "a")
y
y <- c(TRUE, "a")
y
x <- 1:6
as.character(x)
as.numeric(x)
x <- a:c
m <- matrix(nrow = 2, ncol = 3)
m
dim(m)
attributes(m)
x <- 1:3
y <- 10:12
x <- data.frame(foo = 1:4, bar = c(T, T, F, F))
x
x <- 1:3
names(x)
names(x) <- c("foo", "bar", "norf")
x
names(x)
x <- list(a=1, b=2, c=3)
x
names(x)
x <- c("a", "b", "c", "d", "a")
x[1]
x[1:4]
x <- matrix (1:6, 2, 3)
x
x[1,2]
x <- matrix (1:6, 2,3)
x
x[1,]
x[1,, drop = FALSE]
x <- list(foo = 1:4, bar = 0.6)
x <- list(foo = 1:4, bar = 0.6, baz = "hello")
x[c(1,3)]
x <- c(1, 2, NA, 4, NA, 5)
bad <- is.na(x)
x[!bad]
bad
q()
mydata <- rnorm(100)
sd(mydata)
args(lm)
lm(mydata)
lm(data = mydata, y - x, model)
lm(data = mydata, y - x, model)
f <- function(a, b = 1, c = 2, d = NULL)
{}
f(1)
f <- function(a, b) {
a^2
}
f(2)
f <- function(a, b) {
a^2
b83
}
search()
q()
swirl()
swirl()
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files()
?list.files
args(list.files)
old.dir <- getwd
old.dir <- getwd()
?md
dir.create(testdir)
?dir.create
dir.create("testdir")
set.wd("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
lis.files()
list.files()
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
dir()
file.path("mytest3.R")
dir.create("testdir2/testdir3")
dir.create("testdir2/testdir3", recursive = TRUE)
file.remove("mytest2.R")
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
q()
library(MySQL)
library(RMySQL)
ucsDB <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb)
ucscDB <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb)
ucscDB <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
result
x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
lapply(x, mean)
x <- 1:4
lapply(x, runif)
lapply(x, runif, min = 0, max = 10)
x <- list(a =  matrix(1:4, 2, 2), b = matrix(1:6, 3, 3))
x
lapply(x, function(elt) elt[,1]])
lapply(x, function(elt) elt[,1])
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
lapply(x, mean)
sapply(x, mean)
mean(x)
library(datasets)
data(iris)
?iris
dimnames(iris)
lapply(iris, mean)
dimnames(iris)
sapply(iris, mean)
lapply(iris, mean)
sapply(iris, mean)
lapply(iris[iris$Species == virginica], mean)
lapply(iris[iris$Species == 'virginica'], mean)
iris[iris$Species == 'virginica']
iris[,iris$Species == 'virginica']
iris$Species
iris([iris$Species == 'virginica'])
mean(iris[, 'virginica'], na.rm=T)
mean(iris[, Species == 'virginica'], na.rm=T)
dimnames(iris)
iris$Species
iris$Species == 'virginica'
i
mean(iris[,1], na.rm = removeNA)
mean(iris[,1], na.rm = T)
mean(iris which(iris$Specie=='virginica'[,1], na.rm = T)
mean(iris which(iris$Specie=='virginica'[,1], na.rm = T))
mean(iris which(iris$Specie=='virginica', na.rm = T))
mean(iris[ which(iris$Specie=='virginica', na.rm = T)])
mean(iris[ which(iris$Specie=='virginica')], na.rm = T)
iris[ wich(iris$Species=='virginica')]
iris[ which (iris$Species=='virginica')]
iris$Species == 'virginica'
iris[ which (iris$Species == 'virginica')]
iris[which(iris$Species == 'virginica')]
dat <- iris[which(iris$Species == 'virginica')]
dat <- iris[,which(iris$Species == 'virginica')]
dat <- iris[which(iris$Species == 'virginica'), ]
dat
lapply(iris[which(iris$Species == 'virginica'), ], mean)
sapply(iris[which(iris$Species == 'virginica'), ], mean)
dimnames(iris)
mean(iris$[, Species == 'virginica'], na.rm=T)
mean(iris$Sepal.Length[which(iris$Species == 'virginica'), ], na.rm=T)
mean(iris$Sepal.Length)
mean(iris$Sepal.Length[which(iris$Species == 'virginica'), ])
sapply(iris[which(iris$Species == 'virginica'), ], mean)
mean(iris$Sepal.Length[which(iris$Species == 'virginica'), ], na.rm=T)
dat <- iris[which(iris$Species == 'virginica')
dat <- iris[which(iris$Species == 'virginica'), ]
dat
sapply(dat, mean)
sapply(iris[which(iris$Species == 'virginica'), ], mean)
mean(dat$)
mean(dat$Sepal.Length)
sapply(iris[which(iris$Species == 'virginica'), ], mean)
sapply(dat, mean)
library(datasets)
data(iris)
?iris
dimnames(iris)
lapply(iris[which(iris$Species == 'virginica'), ], mean)
sapply(iris[which(iris$Species == 'virginica'), ], mean)
a = apply(iris, 2, mean)
b = apply(iris, 1, mean)
c = apply(iris[, 1:4], 2, mean)
d = colMeans(iris)
c
str(apply)
x <- matrix(rnorm(200), 20,10)
apply(x, 2, mean)
apply(x, 1, sum)
x <- matrix(rnorm(200), 20,10)
apply(x, 1, quantile, probs = c(0.25, 0.75))
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
apply(a, c(1, 2), mean)
c = apply(iris[, 1:4], 2, mean)
c
sapply(iris[which(iris$Species == 'virginica'), 1:4], mean)
lapply(iris[which(iris$Species == 'virginica'), 1:4], mean)
c = apply(iris[which(iris$Species == 'virginica'), 1:4], 2, mean)
c
library(datasets)
data(mtcars)
library(datasets)
data(mtcars)
?mtcars
dimnames(mtcars)
mtcars
dimnames(mtcars)
a
b
c
d
d = sapply(mtcars, cyl, mean)
c = with(mtcars, tapply(mpg, cyl, mean))
c
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f
f <- gl(3, 10)
f
tapply(x, f, mean)
tapply(x, f, mean, simplify = FALSE)
tapply(x, f, range)
witch
?with
c
library(datasets)
data(mtcars)
?mtcars
mtcars
dimnames(mtcars)
c = with(mtcars, tapply(mpg, cyl, mean))
c
tapply(mtcars$mpg, mtcars$cyl, mean)
str(mapply)
mapply(rep, 1:4, 4:1)
mapply(rep, 1:4, 4:1)
noise <- function(n, mean, sd){
rnorm(n, mean, sd)
}
noise(5, 1, 2)
noise(1:5, 1:5, 2)
noise(5, 1, 2)
mapply(noise, 1:5, 1:5, 2)
list(noise(1, 1, 2), noise(2, 2, 2), noise(3, 3, 2), noise(4, 4, 2), noise(5, 5, 2))
mtcars$cyl
dimnames(mtcars)
#Continuing with the 'mtcars' dataset from the previous Question, what is the absolute
sapply(mtcars[which(mtcars$cyl == '8'), 4], mean)
with(mtcars, tapply(hp, cyl, mean))
mean_hp = with(mtcars, tapply(mpg, cyl, mean))
mean_hp
dif_mean = mean_hp[1] - mean_hp[2]
diff_mean
dif_mean
str(split)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
split( x, f)
lapply(split(x, f), mean)
llibrary(datasets)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
lapplys(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm =T))
x <- rnorm(10)
f1 <- gl(2, 5)
f2 <- gl(5, 2)
f1
f2
interaction(fi, f2)
interaction(f1, f2)
str(split(x, list(f1, f2)))
str(split(x, list(f1, f2), drop = T))
degub(ls)
debug(ls)
dif_mean = abs(mean_hp[1] - mean_hp[2])
dif_mean
?mtcars
mtcars
dimnames(mtcars)
#Continuing with the 'mtcars' dataset from the previous Question, what is the absolute
#difference between the average horsepower of 4-cylinder cars and the average horsepower
#of 8-cylinder cars?
mtcars$cyl
mean_hp = with(mtcars, tapply(mpg, cyl, mean))
mean_hp
dif_mean = abs(mean_hp[1] - mean_hp[2])
dif_mean
dif_mean = abs(mean_hp[1] - mean_hp[2])
library(datasets)
data(mtcars)
?mtcars
mtcars
dimnames(mtcars)
library(datasets)
data(mtcars)
?mtcars
mtcars
dimnames(mtcars)
#Continuing with the 'mtcars' dataset from the previous Question, what is the absolute
#difference between the average horsepower of 4-cylinder cars and the average horsepower
#of 8-cylinder cars?
mtcars$cyl
mean_hp = with(mtcars, tapply(mpg, cyl, mean))
mean_hp
dif_mean = abs(mean_hp[1] - mean_hp[2])
dif_mean
?abs
abs(dif_mean)
horsepower <- with(mtcars, tapply(hp, cyl,mean))
horsepower
ave_diff <- horsepower["8"]-horsepower["4"]
abs(ave_diff)
ave_diff <- abs(horsepower["8"]-horsepower["4"])
ave_diff
ave_diff <- abs(horsepower["4"]-horsepower["8"])
ave_diff
library(datasets)
data(iris)
?iris
dimnames(iris)
lapply(iris[which(iris$Species == 'virginica'), 1:4], mean)
sapply(iris[which(iris$Species == 'virginica'), 1:4], mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
dimnames(mtcars)
a = sapply(split(mtcars$mpg, mtcars$cyl), mean)
b = split(mtcars, mtcars$cyl)
c = mean(mtcars$mpg, mtcars$cyl)
d = apply(mtcars, 2, mean)
a
b
d
a
old.wd <- getwd()
new.wd <- ("D:/Cursos/Coursera/DataScience/GettingAndCleaningData/W4")
setwd(new.wd)
old.wd <- getwd()
new.wd <- ("D:/Cursos/Coursera/DataScience/GettingAndCleaningData/W4")
setwd(new.wd)
getwd()
setwd(new.wd)
old.wd <- getwd()
new.wd <- ("D:/Cursos/Coursera/DataScience/R-Programing/W4")
setwd(new.wd)
if (!file.exists("data")) {dir.create("data")}
fileUrl <- ("https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2FProgAssignment3-data.zip")
download.file(fileUrl, destfile = "data/ProgAssignment3-data.zip", mode = "wb")
list.files("data")
?zip
?unzip
list.files("data")
unzip(destfile, exdir = "data/")
destfile <- ("data/ProgAssignment3-data.zip")
unzip(destfile, exdir = "data/")
ls()
list.files()
list.files("data")
unzip(destfile, exdir = ".")
list.files()
unzip(destfile, exdir = "/data")
list.files("data")
list.files()
list.files("data")
unzip(destfile, exdir = "/data")
list.files("data")
list.files()
unzip(destfile, exdir = "/data")
unzip(destfile, exdir = "/data/")
new.wd <- ("D:/Cursos/Coursera/DataScience/R-Programing/W4/data")
setwd(new.wd)
list.files()
destfile <- ("ProgAssignment3-data.zip")
unzip(destfile, exdir = ".")
list.files()
