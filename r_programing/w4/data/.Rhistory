if (num == "best") {
datSort <- datSub[order(datSub[,3], datSub[,1], decreasing = F, na.last = T), ]
hospitalName <- datSort[1,1]
}
if (num == "worst"){
datSort <- datSub[order(datSub[,3], datSub[,1], decreasing = T, na.last = T), ]
hospitalName <- datSort[1,1]
}
} else {
if (num > nrow(dat)){
hospitalName <- NA
} else {
datSort <- datSub[order(datSub[,3], datSub[,1], decreasing = F, na.last = T), ]
hospitalName <- datSort[num,1]
}
}
hospitalName
}
ankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
View(dat)
View(dat)
View(dat)
?read.csv
read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
read.csv("outcome-of-care-measures.csv", colClasses = "character")
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
View(dat)
datSort <- dat[order(dat[,7], datSub[,11], decreasing = F, na.last = T), ]
colnames(dat)  <- 1:46
datSort <- dat[order(dat[,7], datSub[,11], decreasing = F, na.last = T), ]
View(dat)
datSort <- dat[order(dat[,"7"], datSub[,"11"], decreasing = F, na.last = T), ]
datSort <- dat[order(dat[,7], dat[,11], decreasing = F, na.last = T), ]
head(datSort)
head(datSort$7)
head(datSort$"7")
head(datSort$"11")
?split
head(datSort[,7])
datSplitState <-  split(datSort, datSort[,7])
str(dataSpliState)
str(datSpliState)
str(datSplitState)
datSort <- dat[order(dat[,7], dat[,11], dat[,2] decreasing = F, na.last = T), ]
datSort <- dat[order(dat[,7], dat[,11], dat[,2], decreasing = F, na.last = T), ]
head(datSort[,7])
datSplitState <-  split(datSort, datSort[,7])
str(datSplitState)
?subset
lapply(datSplitState, function(x) {x[1,,drop=F]})
datlapply <- lapply(datSplitState, function(x) {x[1,,drop=F]})
?do.call
datRankall <- do.call(rbind, datlapply)
View(datRankall)
subset(datRankall, select = c("2", "7", columnID))
datRankallSub[order(datRankallSub[,3], datRankallSub[,1], decreasing = T, na.last = T), ]
datRankallSub <- subset(datRankall, select = c("2", "7", columnID))
datRankallSub[order(datRankallSub[,3], datRankallSub[,1], decreasing = T, na.last = T), ]
datRankallSub[order(datRankallSub[,3], datRankallSub[,1], decreasing = F, na.last = T), ]
datSort <- dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = T, na.last = T), ]
datSplitState <-  split(datSort, datSort[,7])
datlapply <- lapply(datSplitState, function(x) {x[1,,drop=F]})
datRankall <- do.call(rbind, datlapply)
datRankallSub <- subset(datRankall, select = c("2", "7"))
datRankallOrder <- datRankallSub[order(datRankallSub[,2], decreasing = F, na.last = T), ]
View(datRankallOrder)
dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = T, na.last = T), ]
View(datSort)
View(datSort)
datSort <- dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = T, na.last = T), ]
View(datSort)
datSort <- dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = F, na.last = T), ]
View(datSort)
columnID <- 11
datSort <- dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = F, na.last = T), ]
View(datSort)
datSplitState <-  split(datSort, datSort[,7])
datlapply <- lapply(datSplitState, function(x) {x[1,,drop=F]})
datRankall <- do.call(rbind, datlapply)
datRankallSub <- subset(datRankall, select = c("2", "7"))
datRankallOrder <- datRankallSub[order(datRankallSub[,2], decreasing = F, na.last = T), ]
datRankallOrder
columnID <- 23
datSort <- dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = T, na.last = T), ]
datSplitState <-  split(datSort, datSort[,7])
datlapply <- lapply(datSplitState, function(x) {x[1,,drop=F]})
datRankall <- do.call(rbind, datlapply)
datRankallSub <- subset(datRankall, select = c("2", "7"))
datRankallOrder <- datRankallSub[order(datRankallSub[,2], decreasing = F, na.last = T), ]
View(datRankallOrder)
rankall <- function(outcome, num = "best") {
## Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
colnames(dat)  <- 1:46
## Check that outcome are valid
outcomeMatch <- match(outcome, c("heart attack", "heart failure", "pneumonia"))
if (is.na(outcomeMatch)){
stop("invalid outcome")
}
columnID <- c(11, 17, 23)[outcomeMatch]
## For each state, find the hospital of the given rank
if (is.character(num)){
numMatch <- match(num, c("best", "worst"))
if (is.na(numMatch)){
stop("invalid num")
}
if (num == "best") {
datSort <- dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = F, na.last = T), ]
datSplitState <-  split(datSort, datSort[,7])
datlapply <- lapply(datSplitState, function(x) {x[1,,drop=F]})
datRankall <- do.call(rbind, datlapply)
datRankallSub <- subset(datRankall, select = c("2", "7"))
datRankallOrder <- datRankallSub[order(datRankallSub[,2], decreasing = F, na.last = T), ]
}
if (num == "worst"){
datSort <- dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = T, na.last = T), ]
datSplitState <-  split(datSort, datSort[,7])
datlapply <- lapply(datSplitState, function(x) {x[1,,drop=F]})
datRankall <- do.call(rbind, datlapply)
datRankallSub <- subset(datRankall, select = c("2", "7"))
datRankallOrder <- datRankallSub[order(datRankallSub[,2], decreasing = F, na.last = T), ]
}
} else {
datSort <- dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = F, na.last = T), ]
datSplitState <-  split(datSort, datSort[,7])
datlapply <- lapply(datSplitState, function(x) {x[num,,drop=F]})
datRankall <- do.call(rbind, datlapply)
datRankallSub <- subset(datRankall, select = c("2", "7"))
datRankallOrder <- datRankallSub[order(datRankallSub[,2], decreasing = F, na.last = T), ]
}
}
## Return a data frame with the hospital names and the (abbreviated) state name
datRankallOrder
}
rankall <- function(outcome, num = "best") {
## Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
colnames(dat)  <- 1:46
## Check that outcome are valid
outcomeMatch <- match(outcome, c("heart attack", "heart failure", "pneumonia"))
if (is.na(outcomeMatch)){
stop("invalid outcome")
}
columnID <- c(11, 17, 23)[outcomeMatch]
## For each state, find the hospital of the given rank
if (is.character(num)){
numMatch <- match(num, c("best", "worst"))
if (is.na(numMatch)){
stop("invalid num")
}
if (num == "best") {
datSort <- dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = F, na.last = T), ]
datSplitState <-  split(datSort, datSort[,7])
datlapply <- lapply(datSplitState, function(x) {x[1,,drop=F]})
datRankall <- do.call(rbind, datlapply)
datRankallSub <- subset(datRankall, select = c("2", "7"))
datRankallOrder <- datRankallSub[order(datRankallSub[,2], decreasing = F, na.last = T), ]
}
if (num == "worst"){
datSort <- dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = T, na.last = T), ]
datSplitState <-  split(datSort, datSort[,7])
datlapply <- lapply(datSplitState, function(x) {x[1,,drop=F]})
datRankall <- do.call(rbind, datlapply)
datRankallSub <- subset(datRankall, select = c("2", "7"))
datRankallOrder <- datRankallSub[order(datRankallSub[,2], decreasing = F, na.last = T), ]
}
} else {
datSort <- dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = F, na.last = T), ]
datSplitState <-  split(datSort, datSort[,7])
datlapply <- lapply(datSplitState, function(x) {x[num,,drop=F]})
datRankall <- do.call(rbind, datlapply)
datRankallSub <- subset(datRankall, select = c("2", "7"))
datRankallOrder <- datRankallSub[order(datRankallSub[,2], decreasing = F, na.last = T), ]
}
## Return a data frame with the hospital names and the (abbreviated) state name
datRankallOrder
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
colnames(dat)  <- 1:46
## Check that outcome are valid
outcomeMatch <- match(outcome, c("heart attack", "heart failure", "pneumonia"))
if (is.na(outcomeMatch)){
stop("invalid outcome")
}
columnID <- c(11, 17, 23)[outcomeMatch]
## For each state, find the hospital of the given rank
if (is.character(num)){
numMatch <- match(num, c("best", "worst"))
if (is.na(numMatch)){
stop("invalid num")
}
if (num == "best") {
datSort <- dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = F, na.last = T), ]
datSplitState <-  split(datSort, datSort[,7])
datlapply <- lapply(datSplitState, function(x) {x[1,,drop=F]})
datRankall <- do.call(rbind, datlapply)
datRankallSub <- subset(datRankall, select = c("2", "7"))
datRankallOrder <- datRankallSub[order(datRankallSub[,2], decreasing = F, na.last = F), ]
}
if (num == "worst"){
datSort <- dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = T, na.last = T), ]
datSplitState <-  split(datSort, datSort[,7])
datlapply <- lapply(datSplitState, function(x) {x[1,,drop=F]})
datRankall <- do.call(rbind, datlapply)
datRankallSub <- subset(datRankall, select = c("2", "7"))
datRankallOrder <- datRankallSub[order(datRankallSub[,2], decreasing = F, na.last = F), ]
}
} else {
datSort <- dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = F, na.last = T), ]
datSplitState <-  split(datSort, datSort[,7])
datlapply <- lapply(datSplitState, function(x) {x[num,,drop=F]})
datRankall <- do.call(rbind, datlapply)
datRankallSub <- subset(datRankall, select = c("2", "7"))
datRankallOrder <- datRankallSub[order(datRankallSub[,2], decreasing = F, na.last = F), ]
}
## Return a data frame with the hospital names and the (abbreviated) state name
datRankallOrder
}
head(rankall("heart attack", 20), 10)
?drop
?subset
num = 20
columnID = 11
datSort <- dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = F, na.last = T), ]
datSplitState <-  split(datSort, datSort[,7])
datlapply <- lapply(datSplitState, function(x) {x[num,,drop=F]})
datRankall <- do.call(rbind, datlapply)
datRankallSub <- subset(datRankall, select = c("2", "7"))
datRankallOrder <- datRankallSub[order(datRankallSub[,2], decreasing = F, na.last = F), ]
View(datRankallOrder)
View(datRankallOrder)
View(datRankallSub)
rankall <- function(outcome, num = "best") {
## Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
colnames(dat)  <- 1:46
## Check that outcome are valid
outcomeMatch <- match(outcome, c("heart attack", "heart failure", "pneumonia"))
if (is.na(outcomeMatch)){
stop("invalid outcome")
}
columnID <- c(11, 17, 23)[outcomeMatch]
## For each state, find the hospital of the given rank
if (is.character(num)){
numMatch <- match(num, c("best", "worst"))
if (is.na(numMatch)){
stop("invalid num")
}
if (num == "best") {
datSort <- dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = F, na.last = T), ]
datSplitState <-  split(datSort, datSort[,7])
datlapply <- lapply(datSplitState, function(x) {x[1,,drop=F]})
datRankall <- do.call(rbind, datlapply)
datRankallSub <- subset(datRankall, select = c("2", "7"))
}
if (num == "worst"){
datSort <- dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = T, na.last = T), ]
datSplitState <-  split(datSort, datSort[,7])
datlapply <- lapply(datSplitState, function(x) {x[1,,drop=F]})
datRankall <- do.call(rbind, datlapply)
datRankallSub <- subset(datRankall, select = c("2", "7"))
}
} else {
num = 20
columnID = 11
datSort <- dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = F, na.last = T), ]
datSplitState <-  split(datSort, datSort[,7])
datlapply <- lapply(datSplitState, function(x) {x[num,,drop=F]})
datRankall <- do.call(rbind, datlapply)
datRankallSub <- subset(datRankall, select = c("2", "7"))
}
## Return a data frame with the hospital names and the (abbreviated) state name
datRankallSub
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
columnID = 23
num = "worst"
datSort <- dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = T, na.last = T), ]
View(datSort)
columnID = 23
num = "worst"
datSort <- dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = F, na.last = T), ]
View(datSort)
datSplitState <-  split(datSort, datSort[,7])
datlapply <- lapply(datSplitState, function(x) {x[nrow(x),,drop=F]})
datRankall <- do.call(rbind, datlapply)
datRankallSub <- subset(datRankall, select = c("2", "7"))
View(datRankallSub)
datSort <- dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = F, na.last = T), ]
datSplitState <-  split(datSort, datSort[,7])
datlapply <- lapply(datSplitState, function(x) {x[nrow(x),,drop=F]})
datSort <- dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = T, na.last = T), ]
datSplitState <-  split(datSort, datSort[,7])
datlapply <- lapply(datSplitState, function(x) {x[nrow(x),,drop=F]})
datRankall <- do.call(rbind, datlapply)
datRankallSub <- subset(datRankall, select = c("2", "7"))
View(datRankallSub)
View(datRankallSub)
View(datSort)
columnID = "23"
num = "worst"
datSort <- dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = T, na.last = T), ]
View(datSort)
View(datSort)
datSort <- dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = F, na.last = T), ]
View(datSort)
datSort <- dat[order(dat[,7], dat[,columnID], dat[,2], decreasing = F, na.last = T), ]
View(datSort)
datSplitState <-  split(datSort, datSort[,7])
datlapply <- lapply(datSplitState, function(x) {x[nrow(x),,drop=F]})
datRankall <- do.call(rbind, datlapply)
View(datRankall)
datRankallSub <- subset(datRankall, select = c("2", "7"))
View(datRankallSub)
datRankallSub <- subset(datRankall, select = c("2", "7", "23"))
datRankallSub <- subset(datRankall, select = c("2", "7", "23"))
View(datRankallSub)
dat_temp <- tail(datSort)
View(dat_temp)
dat_temp <- tail(datSort, 20)
View(dat_temp)
dat_temp <- tail(datSort, 30)
View(dat_temp)
View(datRankallSub)
rankall <- function(outcome, num = "best") {
## Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
colnames(dat)  <- 1:46
## Check that outcome are valid
outcomeMatch <- match(outcome, c("heart attack", "heart failure", "pneumonia"))
if (is.na(outcomeMatch)){
stop("invalid outcome")
}
## For each state, find the hospital of the given rank
columnID <- c(11, 17, 23)[outcomeMatch]
datSub <- subset(dat, select = c("2", "7", columnID))
datSub[,3] <- suppressWarnings(as.numeric(datSub[,3]))
datSort <- datSub[order(datSub[,2], datSub[,3], datSub[,1], decreasing = F, na.last = T), ]
datSplitState <-  split(datSort, datSort[,2])
if (is.character(num)){
numMatch <- match(num, c("best", "worst"))
if (is.na(numMatch)){
stop("invalid num")
}
if (num == "best") {
datlapply <- lapply(datSplitState, function(x) {x[1,,drop=F]})
datRankall <- do.call(rbind, datlapply)
datRankallSub <- subset(datRankall, select = c("1", "2"))
}
if (num == "worst"){
datlapply <- lapply(datSplitState, function(x) {x[nrow(x),,drop=F]})
datRankall <- do.call(rbind, datlapply)
datRankallSub <- subset(datRankall, select = c("1", "2"))
}
} else {
datlapply <- lapply(datSplitState, function(x) {x[num,,drop=F]})
datRankall <- do.call(rbind, datlapply)
datRankallSub <- subset(datRankall, select = c("1", "2"))
}
## Return a data frame with the hospital names and the (abbreviated) state name
datRankallSub
}
head(rankall("heart attack", 20), 10)
datSub <- subset(dat, select = c("2", "7", columnID))
datSub[,3] <- suppressWarnings(as.numeric(datSub[,3]))
datSort <- datSub[order(datSub[,2], datSub[,3], datSub[,1], decreasing = F, na.last = T), ]
datSplitState <-  split(datSort, datSort[,2])
datlapply <- lapply(datSplitState, function(x) {x[1,,drop=F]})
datRankall <- do.call(rbind, datlapply)
datRankallSub <- subset(datRankall, select = c("1", "2"))
rankall <- function(outcome, num = "best") {
## Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
colnames(dat)  <- 1:46
## Check that outcome are valid
outcomeMatch <- match(outcome, c("heart attack", "heart failure", "pneumonia"))
if (is.na(outcomeMatch)){
stop("invalid outcome")
}
## For each state, find the hospital of the given rank
columnID <- c(11, 17, 23)[outcomeMatch]
datSub <- subset(dat, select = c("2", "7", columnID))
datSub[,3] <- suppressWarnings(as.numeric(datSub[,3]))
datSort <- datSub[order(datSub[,2], datSub[,3], datSub[,1], decreasing = F, na.last = T), ]
datSplitState <-  split(datSort, datSort[,2])
if (is.character(num)){
numMatch <- match(num, c("best", "worst"))
if (is.na(numMatch)){
stop("invalid num")
}
if (num == "best") {
datlapply <- lapply(datSplitState, function(x) {x[1,,drop=F]})
datRankall <- do.call(rbind, datlapply)
#        datRankallSub <- subset(datRankall, select = c("1", "2"))
}
if (num == "worst"){
datlapply <- lapply(datSplitState, function(x) {x[nrow(x),,drop=F]})
datRankall <- do.call(rbind, datlapply)
#        datRankallSub <- subset(datRankall, select = c("1", "2"))
}
} else {
datlapply <- lapply(datSplitState, function(x) {x[num,,drop=F]})
datRankall <- do.call(rbind, datlapply)
#      datRankallSub <- subset(datRankall, select = c("1", "2"))
}
## Return a data frame with the hospital names and the (abbreviated) state name
datRankallSub
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("./ProgAssignment3-data/outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
validOutcome = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) { stop("invalid outcome")}
validState = sort(unique(data[,7]))
if (!state %in% validState) stop("invalid state")
## convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
## For each state, find the hospital of the given rank
hospital<-character(0)
for (i in seq_along(validState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.state <- data[data$State==validState[i],]
# order data by outcome
sorted.data.state <- data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=validState,row.names=validState)
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## Check that state and outcome are valid
validOutcome = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) { stop("invalid outcome")}
validState = sort(unique(data[,7]))
if (!state %in% validState) stop("invalid state")
## convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
## For each state, find the hospital of the given rank
hospital<-character(0)
for (i in seq_along(validState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.state <- data[data$State==validState[i],]
# order data by outcome
sorted.data.state <- data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=validState,row.names=validState)
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
#read in the desired data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
#create a list of states and initialize a character array to hold the
#required hospital names
state <- levels(factor(data[, 7]))
hospital <- vector(mode="character")
for (i in seq(state)) {
hospital[i] <- rankhospital(state[i], outcome, num)
}
data.frame(hospital, state)
}
head(rankall("heart attack", 20), 10)
data[, 7]
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
#read in the desired data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
#create a list of states and initialize a character array to hold the
#required hospital names
state <- levels(factor(dat[, 7]))
hospital <- vector(mode="character")
for (i in seq(state)) {
hospital[i] <- rankhospital(state[i], outcome, num)
}
data.frame(hospital, state)
}
head(rankall("heart attack", 20), 10)
